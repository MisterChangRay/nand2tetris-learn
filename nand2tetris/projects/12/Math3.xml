  <keyword> class </keyword>
  <identifier> Math </identifier>
  <symbol> { </symbol>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
      <symbol> { </symbol>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
                <stringConstant> The average is  </stringConstant>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> init </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
      <symbol> { </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> abs </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> shiftLeft </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> shift </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
          <keyword> while </keyword>
          <symbol> ( </symbol>
              <identifier> shift </identifier>
            <symbol> &gt; </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <symbol> = </symbol>
                  <identifier> x </identifier>
                <symbol> + </symbol>
                  <identifier> x </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> return </keyword>
              <identifier> x </identifier>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> bitof </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> index </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> index </identifier>
            <symbol> &gt; </symbol>
              <integerConstant> 0 </integerConstant>
            <symbol> | </symbol>
              <identifier> index </identifier>
            <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> while </keyword>
          <symbol> ( </symbol>
              <identifier> index </identifier>
            <symbol> &gt; </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> index </identifier>
              <symbol> = </symbol>
                  <identifier> index </identifier>
                <symbol> - </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
                  <identifier> i </identifier>
                <symbol> + </symbol>
                  <identifier> i </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> let </keyword>
          <identifier> index </identifier>
          <symbol> = </symbol>
              <identifier> x </identifier>
            <symbol> &amp; </symbol>
              <identifier> i </identifier>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> index </identifier>
            <symbol> = </symbol>
              <identifier> i </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> multiply </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> xi </identifier>
        <symbol> , </symbol>
        <identifier> yi </identifier>
        <symbol> , </symbol>
        <identifier> tmp1 </identifier>
        <symbol> , </symbol>
        <identifier> tmp2 </identifier>
        <symbol> , </symbol>
        <identifier> tmp3 </identifier>
        <symbol> , </symbol>
        <identifier> tmp4 </identifier>
        <symbol> , </symbol>
        <identifier> res </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> xi </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> yi </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> while </keyword>
          <symbol> ( </symbol>
              <identifier> xi </identifier>
            <symbol> &lt; </symbol>
              <integerConstant> 16 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> tmp1 </identifier>
              <symbol> = </symbol>
                  <identifier> bitof </identifier>
                  <symbol> ( </symbol>
                        <identifier> x </identifier>
                    <symbol> , </symbol>
                        <identifier> xi </identifier>
                  <symbol> ) </symbol>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> tmp3 </identifier>
              <symbol> = </symbol>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
              <keyword> while </keyword>
              <symbol> ( </symbol>
                  <identifier> yi </identifier>
                <symbol> &lt; </symbol>
                  <integerConstant> 16 </integerConstant>
              <symbol> ) </symbol>
              <symbol> { </symbol>
                  <keyword> let </keyword>
                  <identifier> tmp4 </identifier>
                  <symbol> = </symbol>
                      <integerConstant> 0 </integerConstant>
                  <symbol> ; </symbol>
                  <keyword> let </keyword>
                  <identifier> tmp2 </identifier>
                  <symbol> = </symbol>
                      <identifier> bitof </identifier>
                      <symbol> ( </symbol>
                            <identifier> y </identifier>
                        <symbol> , </symbol>
                            <identifier> yi </identifier>
                      <symbol> ) </symbol>
                  <symbol> ; </symbol>
                  <keyword> let </keyword>
                  <identifier> tmp4 </identifier>
                  <symbol> = </symbol>
                      <identifier> shiftLeft </identifier>
                      <symbol> ( </symbol>
                            <integerConstant> 1 </integerConstant>
                        <symbol> , </symbol>
                            <identifier> yi </identifier>
                      <symbol> ) </symbol>
                  <symbol> ; </symbol>
                  <keyword> let </keyword>
                  <identifier> tmp1 </identifier>
                  <symbol> = </symbol>
                      <identifier> tmp1 </identifier>
                    <symbol> + </symbol>
                      <identifier> tmp2 </identifier>
                  <symbol> ; </symbol>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                      <identifier> tmp1 </identifier>
                    <symbol> &gt; </symbol>
                      <integerConstant> 1 </integerConstant>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                      <keyword> let </keyword>
                      <identifier> tmp3 </identifier>
                      <symbol> = </symbol>
                          <identifier> tmp3 </identifier>
                        <symbol> + </symbol>
                          <identifier> tmp4 </identifier>
                      <symbol> ; </symbol>
                  <symbol> } </symbol>
                  <keyword> let </keyword>
                  <identifier> yi </identifier>
                  <symbol> = </symbol>
                      <identifier> yi </identifier>
                    <symbol> + </symbol>
                      <integerConstant> 1 </integerConstant>
                  <symbol> ; </symbol>
              <symbol> } </symbol>
              <keyword> let </keyword>
              <identifier> tmp3 </identifier>
              <symbol> = </symbol>
                  <identifier> shiftLeft </identifier>
                  <symbol> ( </symbol>
                        <identifier> tmp3 </identifier>
                    <symbol> , </symbol>
                        <identifier> xi </identifier>
                  <symbol> ) </symbol>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> res </identifier>
              <symbol> = </symbol>
                  <identifier> res </identifier>
                <symbol> + </symbol>
                  <identifier> tmp3 </identifier>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> xi </identifier>
              <symbol> = </symbol>
                  <identifier> xi </identifier>
                <symbol> + </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> return </keyword>
              <identifier> res </identifier>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> divide </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> q </identifier>
        <symbol> ; </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> tmp </identifier>
        <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> y </identifier>
            <symbol> &gt; </symbol>
              <identifier> x </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> let </keyword>
          <identifier> tmp </identifier>
          <symbol> = </symbol>
              <identifier> multiply </identifier>
              <symbol> ( </symbol>
                    <identifier> y </identifier>
                <symbol> , </symbol>
                    <integerConstant> 2 </integerConstant>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> q </identifier>
          <symbol> = </symbol>
              <identifier> divide </identifier>
              <symbol> ( </symbol>
                    <identifier> x </identifier>
                <symbol> , </symbol>
                    <identifier> tmp </identifier>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> x </identifier>
            <symbol> - </symbol>
              <identifier> multiply </identifier>
              <symbol> ( </symbol>
                    <identifier> tmp </identifier>
                <symbol> , </symbol>
                    <identifier> q </identifier>
              <symbol> ) </symbol>
            <symbol> &gt; </symbol>
              <identifier> y </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> multiply </identifier>
                  <symbol> ( </symbol>
                        <identifier> q </identifier>
                    <symbol> , </symbol>
                        <integerConstant> 2 </integerConstant>
                  <symbol> ) </symbol>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> multiply </identifier>
                  <symbol> ( </symbol>
                        <identifier> q </identifier>
                    <symbol> , </symbol>
                        <integerConstant> 2 </integerConstant>
                  <symbol> ) </symbol>
                <symbol> + </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> sqrt </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> max </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> a </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> b </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> a </identifier>
            <symbol> &gt; </symbol>
              <identifier> b </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> a </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> b </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> min </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> a </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> b </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> a </identifier>
            <symbol> &gt; </symbol>
              <identifier> b </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> b </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> a </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
      <symbol> } </symbol>
  <symbol> } </symbol>
