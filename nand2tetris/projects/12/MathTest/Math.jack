// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bitmap;


    /** Initializes the library. */
    function void init() {
        let bitmap = Array.new(16);
        let bitmap[0] = 1;
		let bitmap[1] = 2;
		let bitmap[2] = 4;
		let bitmap[3] = 8;
		let bitmap[4] = 16;
		let bitmap[5] = 32;
		let bitmap[6] = 64;
		let bitmap[7] = 128;
		let bitmap[8] = 256;
		let bitmap[9] = 512;
		let bitmap[10] = 1024;
		let bitmap[11] = 2048;
		let bitmap[12] = 4096;
		let bitmap[13] = 8192;
		let bitmap[14] = 16384;
		let bitmap[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0) {
           let  x = -x;
        }
        return x;
    }

    function int shiftLeft(int x, int shift) {
        while(shift > 0) {
            let shift = shift - 1;
            let x = x + x;
        }
        return x;
    }

    
      function int bitof(int x, int index) {
        var int res;
        let res = bitmap[index];

        let res = x & res;
        if(res > 0) {
            return 1;
        } else {
            return 0;
        }
    }


    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
   function int multiply(int x, int y) {
        var int sum, shifty, i, j;
        let i = 0;
        let shifty = y;

        while(i < 16) {
            
            let j = x & bitmap[i] ;
            if(~(j = 0)) {
                let sum = sum + shifty;
            }
            let shifty = shifty + shifty;
            let i = i + 1;
        }
        return sum;          

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    

    
    function int divide(int x, int y) {
        var int q, flag, ax, ay ,res;
        var int tmp , tmp2;
        let flag = 0;

        let ax = Math.abs(x);
        let ay = Math.abs(y);
        if(ay > ax) {
            return 0;
        }

        if(x < 0) {
            let flag = 1;
        }
        if(y < 0) {
            let flag = 1;
        }
  
        let tmp = Math.multiply(ay, 2);
        let q = Math.divide(ax, tmp);


        let tmp2 =  ax -(tmp * q);
        if(tmp2  < ay) {
         
            let res =  Math.multiply(q, 2);
        } else {
          
            let res = Math.multiply(q, 2) + 1;
        }

        if(flag = 1) {
            return -res;
        } else {
            return res;
        }
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int n, t, o, y;
        let n = x / 2;
        let o = 0;

        let y = 0;
        while(n > -1) {
            let t = n * n;
            if(t = x) {
                let y = n;
                return y;
            }

            if(t > x) {
                if(o = 0) {
                    let n = n / 2;
                } else {
                    let y = n - 1;
                    return y;
                }
            }

            if(t < x) {
                let n = n + 1;
                let o = 1;
            }

        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a>b) {
            return b;
        } else {
            return a;
        }
    }
}
