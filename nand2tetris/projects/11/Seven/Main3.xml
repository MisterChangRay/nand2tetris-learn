  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
    <keyword> static </keyword>
    <identifier> Array </identifier>
    <identifier> bitmap </identifier>
    <symbol> ; </symbol>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> = </symbol>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
                    <integerConstant> 16 </integerConstant>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 1 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 1 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 2 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 2 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 4 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 3 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 8 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 4 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 16 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 5 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 32 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 6 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 64 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 7 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 128 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 8 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 256 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 9 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 512 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 10 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 1024 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 11 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 2048 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 12 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 4096 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 13 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 8192 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 14 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 16384 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> bitmap </identifier>
          <symbol> [ </symbol>
              <integerConstant> 15 </integerConstant>
          <symbol> ] </symbol>
          <symbol> = </symbol>
              <integerConstant> 16384 </integerConstant>
            <symbol> + </symbol>
              <integerConstant> 16384 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> bitof </identifier>
              <symbol> ( </symbol>
                    <integerConstant> 23 </integerConstant>
                <symbol> , </symbol>
                    <integerConstant> 3 </integerConstant>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printInt </identifier>
          <symbol> ( </symbol>
                <identifier> i </identifier>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> return </keyword>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> divide </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> flag </identifier>
        <symbol> , </symbol>
        <identifier> res </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> flag </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> x </identifier>
            <symbol> &lt; </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <symbol> = </symbol>
                  <symbol> - </symbol>
                    <identifier> x </identifier>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> flag </identifier>
              <symbol> = </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> y </identifier>
            <symbol> &lt; </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> y </identifier>
              <symbol> = </symbol>
                  <symbol> - </symbol>
                    <identifier> y </identifier>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> flag </identifier>
              <symbol> = </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> doDiv </identifier>
              <symbol> ( </symbol>
                    <identifier> x </identifier>
                <symbol> , </symbol>
                    <identifier> y </identifier>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> flag </identifier>
            <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> res </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> return </keyword>
              <symbol> - </symbol>
                <identifier> res </identifier>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> doDiv </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> q </identifier>
        <symbol> ; </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> tmp </identifier>
        <symbol> , </symbol>
        <identifier> tmp2 </identifier>
        <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> y </identifier>
            <symbol> &gt; </symbol>
              <identifier> x </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> let </keyword>
          <identifier> tmp </identifier>
          <symbol> = </symbol>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> multiply </identifier>
              <symbol> ( </symbol>
                    <identifier> y </identifier>
                <symbol> , </symbol>
                    <integerConstant> 2 </integerConstant>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> q </identifier>
          <symbol> = </symbol>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> divide </identifier>
              <symbol> ( </symbol>
                    <identifier> x </identifier>
                <symbol> , </symbol>
                    <identifier> tmp </identifier>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> tmp2 </identifier>
          <symbol> = </symbol>
              <identifier> x </identifier>
            <symbol> - </symbol>
              <symbol> ( </symbol>
                  <identifier> tmp </identifier>
                <symbol> * </symbol>
                  <identifier> q </identifier>
              <symbol> ) </symbol>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> tmp2 </identifier>
            <symbol> &lt; </symbol>
              <identifier> y </identifier>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> Main </identifier>
                  <symbol> . </symbol>
                  <identifier> multiply </identifier>
                  <symbol> ( </symbol>
                        <identifier> q </identifier>
                    <symbol> , </symbol>
                        <integerConstant> 2 </integerConstant>
                  <symbol> ) </symbol>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <identifier> Main </identifier>
                  <symbol> . </symbol>
                  <identifier> multiply </identifier>
                  <symbol> ( </symbol>
                        <identifier> q </identifier>
                    <symbol> , </symbol>
                        <integerConstant> 2 </integerConstant>
                  <symbol> ) </symbol>
                <symbol> + </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> multiply2 </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> xi </identifier>
        <symbol> , </symbol>
        <identifier> yi </identifier>
        <symbol> , </symbol>
        <identifier> res </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> xi </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> yi </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> while </keyword>
          <symbol> ( </symbol>
              <identifier> xi </identifier>
            <symbol> &lt; </symbol>
              <integerConstant> 16 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printInt </identifier>
              <symbol> ( </symbol>
                    <identifier> xi </identifier>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> println </identifier>
              <symbol> ( </symbol>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> yi </identifier>
              <symbol> = </symbol>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
              <keyword> while </keyword>
              <symbol> ( </symbol>
                  <identifier> yi </identifier>
                <symbol> &lt; </symbol>
                  <integerConstant> 16 </integerConstant>
              <symbol> ) </symbol>
              <symbol> { </symbol>
                  <keyword> do </keyword>
                  <identifier> Output </identifier>
                  <symbol> . </symbol>
                  <identifier> printInt </identifier>
                  <symbol> ( </symbol>
                        <identifier> yi </identifier>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                  <keyword> let </keyword>
                  <identifier> res </identifier>
                  <symbol> = </symbol>
                      <identifier> res </identifier>
                    <symbol> + </symbol>
                      <integerConstant> 1 </integerConstant>
                  <symbol> ; </symbol>
                  <keyword> let </keyword>
                  <identifier> yi </identifier>
                  <symbol> = </symbol>
                      <identifier> yi </identifier>
                    <symbol> + </symbol>
                      <integerConstant> 1 </integerConstant>
                  <symbol> ; </symbol>
              <symbol> } </symbol>
              <keyword> let </keyword>
              <identifier> xi </identifier>
              <symbol> = </symbol>
                  <identifier> xi </identifier>
                <symbol> + </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> return </keyword>
              <identifier> res </identifier>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> multiply </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> xi </identifier>
        <symbol> , </symbol>
        <identifier> yi </identifier>
        <symbol> , </symbol>
        <identifier> xb </identifier>
        <symbol> , </symbol>
        <identifier> yb </identifier>
        <symbol> , </symbol>
        <identifier> tmp1 </identifier>
        <symbol> , </symbol>
        <identifier> tmp2 </identifier>
        <symbol> , </symbol>
        <identifier> res </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> xi </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> yi </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ; </symbol>
          <keyword> while </keyword>
          <symbol> ( </symbol>
              <identifier> xi </identifier>
            <symbol> &lt; </symbol>
              <integerConstant> 16 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> xb </identifier>
              <symbol> = </symbol>
                  <identifier> Main </identifier>
                  <symbol> . </symbol>
                  <identifier> bitof </identifier>
                  <symbol> ( </symbol>
                        <identifier> x </identifier>
                    <symbol> , </symbol>
                        <identifier> xi </identifier>
                  <symbol> ) </symbol>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> tmp1 </identifier>
              <symbol> = </symbol>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> yi </identifier>
              <symbol> = </symbol>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
              <keyword> while </keyword>
              <symbol> ( </symbol>
                  <identifier> yi </identifier>
                <symbol> &lt; </symbol>
                  <integerConstant> 16 </integerConstant>
              <symbol> ) </symbol>
              <symbol> { </symbol>
                  <keyword> let </keyword>
                  <identifier> yb </identifier>
                  <symbol> = </symbol>
                      <identifier> Main </identifier>
                      <symbol> . </symbol>
                      <identifier> bitof </identifier>
                      <symbol> ( </symbol>
                            <identifier> y </identifier>
                        <symbol> , </symbol>
                            <identifier> yi </identifier>
                      <symbol> ) </symbol>
                  <symbol> ; </symbol>
                  <keyword> let </keyword>
                  <identifier> tmp2 </identifier>
                  <symbol> = </symbol>
                      <identifier> xb </identifier>
                    <symbol> + </symbol>
                      <identifier> yb </identifier>
                  <symbol> ; </symbol>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                      <identifier> tmp2 </identifier>
                    <symbol> &gt; </symbol>
                      <integerConstant> 1 </integerConstant>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                      <keyword> let </keyword>
                      <identifier> tmp2 </identifier>
                      <symbol> = </symbol>
                          <identifier> Main </identifier>
                          <symbol> . </symbol>
                          <identifier> shiftLeft </identifier>
                          <symbol> ( </symbol>
                                <integerConstant> 1 </integerConstant>
                            <symbol> , </symbol>
                                <identifier> yi </identifier>
                          <symbol> ) </symbol>
                      <symbol> ; </symbol>
                      <keyword> let </keyword>
                      <identifier> tmp1 </identifier>
                      <symbol> = </symbol>
                          <identifier> tmp1 </identifier>
                        <symbol> + </symbol>
                          <identifier> tmp2 </identifier>
                      <symbol> ; </symbol>
                  <symbol> } </symbol>
                  <keyword> let </keyword>
                  <identifier> yi </identifier>
                  <symbol> = </symbol>
                      <identifier> yi </identifier>
                    <symbol> + </symbol>
                      <integerConstant> 1 </integerConstant>
                  <symbol> ; </symbol>
              <symbol> } </symbol>
              <keyword> let </keyword>
              <identifier> tmp1 </identifier>
              <symbol> = </symbol>
                  <identifier> Main </identifier>
                  <symbol> . </symbol>
                  <identifier> shiftLeft </identifier>
                  <symbol> ( </symbol>
                        <identifier> tmp1 </identifier>
                    <symbol> , </symbol>
                        <identifier> xi </identifier>
                  <symbol> ) </symbol>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> res </identifier>
              <symbol> = </symbol>
                  <identifier> res </identifier>
                <symbol> + </symbol>
                  <identifier> tmp1 </identifier>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> xi </identifier>
              <symbol> = </symbol>
                  <identifier> xi </identifier>
                <symbol> + </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> return </keyword>
              <identifier> res </identifier>
          <symbol> ; </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> bitof </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> index </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> res </identifier>
        <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>
              <identifier> bitmap </identifier>
              <symbol> [ </symbol>
                  <identifier> index </identifier>
              <symbol> ] </symbol>
          <symbol> ; </symbol>
          <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>
              <identifier> x </identifier>
            <symbol> &amp; </symbol>
              <identifier> res </identifier>
          <symbol> ; </symbol>
          <keyword> if </keyword>
          <symbol> ( </symbol>
              <identifier> res </identifier>
            <symbol> &gt; </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
              <keyword> return </keyword>
                  <integerConstant> 0 </integerConstant>
              <symbol> ; </symbol>
          <symbol> } </symbol>
      <symbol> } </symbol>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> shiftLeft </identifier>
    <symbol> ( </symbol>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> shift </identifier>
    <symbol> ) </symbol>
      <symbol> { </symbol>
          <keyword> while </keyword>
          <symbol> ( </symbol>
              <identifier> shift </identifier>
            <symbol> &gt; </symbol>
              <integerConstant> 0 </integerConstant>
          <symbol> ) </symbol>
          <symbol> { </symbol>
              <keyword> let </keyword>
              <identifier> shift </identifier>
              <symbol> = </symbol>
                  <identifier> shift </identifier>
                <symbol> - </symbol>
                  <integerConstant> 1 </integerConstant>
              <symbol> ; </symbol>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <symbol> = </symbol>
                  <identifier> x </identifier>
                <symbol> + </symbol>
                  <identifier> x </identifier>
              <symbol> ; </symbol>
          <symbol> } </symbol>
          <keyword> return </keyword>
              <identifier> x </identifier>
          <symbol> ; </symbol>
      <symbol> } </symbol>
  <symbol> } </symbol>
