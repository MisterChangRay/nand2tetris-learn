// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux(in=load,sel=address[14],a=loadRam, b=loadScreen1);
    DMux(in=load,sel=address[13],a=loadScreen2, b=loadKeyboard );
    And(a=loadScreen1, b=loadScreen2, out=loadScreen);


    RAM16K(in=in, load=loadRam, address=address[0..13], out=out1);

    DMux(in=loadScreen,sel=address[3],a=loadScreen11, b=loadScreen22);
    RAM4K(in = in, load=loadScreen11, address=address[0..11], out=out2);
    RAM4K(in = in, load=loadScreen22, address=address[0..11], out=out4);
   

    Mux16(a=out2, b=out4, sel=address[3], out=out3);

    Register(in = in, load=loadKeyboard, out=out5);

    Mux16(a=out1, b=out3, sel=address[14], out=out10);
    And(a=address[14], b=address[13], out=outKeyboard);
    Mux16(a=out10, b=out5, sel=outKeyboard, out=out13);


    Not16(in=in, out=notin);
    And16(a=in, b=notin, out=zeroin);

    Or8Way(in=address[0..7], out=overload1);
    Or8Way(in=address[5..12], out=overload2);
    Or(a=overload1, b=overload2, out=overload3);

    And(a=overload3, b=outKeyboard, out=overload);
    Mux16(a=out13, b=zeroin, sel=overload, out=out);    

}