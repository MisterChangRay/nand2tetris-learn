// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Xor(a=reset,b=reset, out=zero);
    Not(in=zero, out=one);


    // 处理C指令
    Mux16(a=regAVal, b=inM, sel = instruction[12], out=regAForInput);

    ALU(x=regDVal, y= regAForInput, 
    zx=instruction[11], nx=instruction[10], 
    zy=instruction[9], ny=instruction[8], 
    f=instruction[7],  no=instruction[6], out=aluOut, zr=aluZr, ng= aluNg, out=outM);


    Mux16(a=instruction , b=aluOut, sel=instruction[15], out=regAInVal);  
    And(a=instruction[5], b=instruction[15], out=aload1)  ;
    Not(in=instruction[15], out=instruction15);
    Or(a=aload1, b=instruction15, out=aload)  ;

    ARegister(in = regAInVal, load=aload, out=regAVal, out=jumpAddr, out[0..14]=addressM1, out[0..14]=addressM);


    And(a=instruction[4], b=instruction[15], out=isLoadD);    
    DRegister(in = aluOut, load=isLoadD, out=regDVal);


    And(a=instruction[3], b=instruction[15], out=isLoadM, out=writeM);    
    Memory(in=aluOut, load=isLoadM, address=addressM1);
    


    And(a=instruction[1], b=aluZr, out=if1);
    Mux(a=zero, b=one, sel=if1, out=load0);

    And(a=instruction[2], b=aluNg, out=if2);
    Mux(a=zero, b=one, sel=if2, out=load1);
    Or(a=load0, b=load1, out=load01);


    Or(a=aluZr, b=aluNg, out=gtr);
    Not(in =gtr, out=outGT);
    And(a=instruction[0], b=outGT, out=if3);
    Mux(a=zero, b=one, sel=if3, out=load3);

    Or(a=load01, b=load3, out=load012);

    And(a=load012, b=instruction[15], out=isJmp);
    Not(in=isJmp, out=inc0);
    Mux16(a=outPc, b=jumpAddr, sel=isJmp, out=newOutPc);

    PC(in=newOutPc, load=isJmp, inc=inc0, reset=reset, out=outPc, out[0..14]=pc);


}